version: '3.8'

services:
  aegis-scanner:
    build: .
    container_name: aegis-scanner
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - PYTHONUNBUFFERED=1
    volumes:
      # Mount volume for persistent data (database, logs, configuration)
      - aegis-data:/root/.aegisscanner
      # Optional: Mount for database backup
      - ./backups:/app/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aegis-network

  # Optional: Redis for caching (uncomment if using Flask-Caching with Redis)
  # redis:
  #   image: redis:7-alpine
  #   container_name: aegis-redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis-data:/data
  #   restart: unless-stopped
  #   networks:
  #     - aegis-network

  # Optional: PostgreSQL for production database (uncomment to use instead of SQLite)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: aegis-postgres
  #   environment:
  #     POSTGRES_DB: aegis
  #     POSTGRES_USER: aegis_user
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   restart: unless-stopped
  #   networks:
  #     - aegis-network

volumes:
  aegis-data:
    driver: local
  # redis-data:
  #   driver: local
  # postgres-data:
  #   driver: local

networks:
  aegis-network:
    driver: bridge
